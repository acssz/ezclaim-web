"use client";

import { createContext, useContext, useEffect, useMemo, useState } from "react";

export type Lang = "zh" | "en" | "de-CH" | "fr";

type Ctx = {
  lang: Lang;
  t: (key: string) => string;
  setLang: (l: Lang) => void;
};

const I18nContext = createContext<Ctx | null>(null);

const dict: Record<Lang, Record<string, string>> = {
  zh: {
    brand: "EzClaim",
    welcome: "欢迎使用 EzClaim",
    tagline: "一个简单、专业、适配手机与桌面的报销系统。",
    newClaim: "新建报销单",
    adminSoon: "管理端（即将提供）",
    openExisting: "打开已有报销单",
    claimId: "报销单ID",
    passwordOptional: "密码（可选）",
    openClaim: "打开报销单",
    createTitle: "新建报销单",
    fieldTitle: "标题",
    fieldDescription: "说明",
    fieldAmount: "金额",
    fieldCurrency: "币种",
    fieldExpenseAt: "消费时间",
    fieldRecipient: "收款人",
    payoutInfo: "收款信息",
    payoutIban: "IBAN",
    payoutAccount: "账户号",
    payoutBankName: "开户行",
    payoutSwift: "SWIFT",
    payoutRouting: "Routing Number",
    payoutBankAddress: "银行地址",
    tags: "标签",
    attachments: "附件（发票/小票照片）",
    password: "访问密码（可选）",
    passwordHint: "可为该报销单设置访问密码。设置后，查看或更新需要输入此密码。",
    submit: "提交报销单",
    detailTitle: "报销单详情",
    refresh: "刷新",
    process: "流程",
    actions: "操作",
    withdraw: "撤回申请",
    confirmFinish: "确认收款，标记为完成",
    amount: "金额",
    expenseAt: "消费时间",
    createdAt: "创建时间",
    updatedAt: "更新时间",
    recipient: "收款人",
    attachmentsShort: "附件",
    status_UNKNOWN: "待定",
    status_SUBMITTED: "已提交",
    status_APPROVED: "已批准",
    status_PAID: "已支付",
    status_FINISHED: "已完成",
    status_REJECTED: "已拒绝",
    status_WITHDRAW: "已撤回",
    claimIdNote: "此 ID 类似密码，请妥善保管，不要分享。",
    copy: "复制",
    enterPassword: "请输入访问密码",
    cancel: "取消",
    confirm: "确认",
  },
  en: {
    brand: "EzClaim",
    welcome: "Welcome to EzClaim",
    tagline: "A simple, professional reimbursement app for mobile and desktop.",
    newClaim: "New Claim (anonymous)",
    adminSoon: "Admin (coming soon)",
    openExisting: "Open Existing Claim",
    claimId: "Claim ID",
    passwordOptional: "Password (optional)",
    openClaim: "Open Claim",
    createTitle: "Create Claim",
    fieldTitle: "Title",
    fieldDescription: "Description",
    fieldAmount: "Amount",
    fieldCurrency: "Currency",
    fieldExpenseAt: "Expense Time",
    fieldRecipient: "Recipient",
    payoutInfo: "Payout Info",
    payoutIban: "IBAN",
    payoutAccount: "Account Number",
    payoutBankName: "Bank Name",
    payoutSwift: "SWIFT",
    payoutRouting: "Routing Number",
    payoutBankAddress: "Bank Address",
    tags: "Tags",
    attachments: "Attachments (receipt photos)",
    password: "Password (optional)",
    passwordHint: "You can set a password. Viewing or updating later requires it.",
    submit: "Submit Claim",
    detailTitle: "Claim Detail",
    refresh: "Refresh",
    process: "Process",
    actions: "Actions",
    withdraw: "Withdraw",
    confirmFinish: "Confirm received, mark finished",
    amount: "Amount",
    expenseAt: "Expense Time",
    createdAt: "Created At",
    updatedAt: "Updated At",
    recipient: "Recipient",
    attachmentsShort: "Attachments",
    status_UNKNOWN: "Unknown",
    status_SUBMITTED: "Submitted",
    status_APPROVED: "Approved",
    status_PAID: "Paid",
    status_FINISHED: "Finished",
    status_REJECTED: "Rejected",
    status_WITHDRAW: "Withdrawn",
    claimIdNote: "Treat this ID like a password. Keep it private.",
    copy: "Copy",
    enterPassword: "Enter password",
    cancel: "Cancel",
    confirm: "Confirm",
  },
  "de-CH": {
    brand: "EzClaim",
    welcome: "Willkommen bei EzClaim",
    tagline: "Eine einfache, professionelle Spesenlösung für Mobil und Desktop.",
    newClaim: "Neue Spesen",
    adminSoon: "Admin (bald verfügbar)",
    openExisting: "Vorhandene Spesen öffnen",
    claimId: "Spesen-ID",
    passwordOptional: "Passwort (optional)",
    openClaim: "Spesen öffnen",
    createTitle: "Spesen erfassen",
    fieldTitle: "Titel",
    fieldDescription: "Beschreibung",
    fieldAmount: "Betrag",
    fieldCurrency: "Währung",
    fieldExpenseAt: "Ausgabedatum",
    fieldRecipient: "Empfänger/in",
    payoutInfo: "Auszahlungsinfo",
    payoutIban: "IBAN",
    payoutAccount: "Kontonummer",
    payoutBankName: "Bankname",
    payoutSwift: "SWIFT",
    payoutRouting: "Routing-Nummer",
    payoutBankAddress: "Bankadresse",
    tags: "Tags",
    attachments: "Beilagen (Belege/Fotos)",
    password: "Passwort (optional)",
    passwordHint: "Sie können ein Passwort setzen. Ansicht/Änderung erfordert es.",
    submit: "Spesen einreichen",
    detailTitle: "Spesendetails",
    refresh: "Aktualisieren",
    process: "Ablauf",
    actions: "Aktionen",
    withdraw: "Zurückziehen",
    confirmFinish: "Erhalt bestätigen, als abgeschlossen markieren",
    amount: "Betrag",
    expenseAt: "Ausgabedatum",
    createdAt: "Erstellt am",
    updatedAt: "Aktualisiert am",
    recipient: "Empfänger/in",
    attachmentsShort: "Beilagen",
    status_UNKNOWN: "Unbekannt",
    status_SUBMITTED: "Eingereicht",
    status_APPROVED: "Genehmigt",
    status_PAID: "Bezahlt",
    status_FINISHED: "Abgeschlossen",
    status_REJECTED: "Abgelehnt",
    status_WITHDRAW: "Zurückgezogen",
    claimIdNote: "Behandeln Sie diese ID wie ein Passwort. Nicht teilen.",
    copy: "Kopieren",
    enterPassword: "Passwort eingeben",
    cancel: "Abbrechen",
    confirm: "Bestätigen",
  },
  fr: {
    brand: "EzClaim",
    welcome: "Bienvenue sur EzClaim",
    tagline: "Une application de notes de frais simple et professionnelle.",
    newClaim: "Nouvelle note",
    adminSoon: "Admin (bientôt)",
    openExisting: "Ouvrir une note existante",
    claimId: "ID de note",
    passwordOptional: "Mot de passe (optionnel)",
    openClaim: "Ouvrir la note",
    createTitle: "Créer une note",
    fieldTitle: "Titre",
    fieldDescription: "Description",
    fieldAmount: "Montant",
    fieldCurrency: "Devise",
    fieldExpenseAt: "Date de dépense",
    fieldRecipient: "Bénéficiaire",
    payoutInfo: "Infos de paiement",
    payoutIban: "IBAN",
    payoutAccount: "Numéro de compte",
    payoutBankName: "Banque",
    payoutSwift: "SWIFT",
    payoutRouting: "Numéro de routage",
    payoutBankAddress: "Adresse de la banque",
    tags: "Tags",
    attachments: "Pièces jointes (reçus)",
    password: "Mot de passe (optionnel)",
    passwordHint: "Vous pouvez définir un mot de passe. Requis pour consulter/modifier.",
    submit: "Soumettre la note",
    detailTitle: "Détails de la note",
    refresh: "Actualiser",
    process: "Processus",
    actions: "Actions",
    withdraw: "Retirer",
    confirmFinish: "Confirmer reçu, marquer terminé",
    amount: "Montant",
    expenseAt: "Date de dépense",
    createdAt: "Créé le",
    updatedAt: "Mis à jour le",
    recipient: "Bénéficiaire",
    attachmentsShort: "Pièces jointes",
    status_UNKNOWN: "Inconnu",
    status_SUBMITTED: "Soumis",
    status_APPROVED: "Approuvé",
    status_PAID: "Payé",
    status_FINISHED: "Terminé",
    status_REJECTED: "Rejeté",
    status_WITHDRAW: "Retiré",
    claimIdNote: "Considérez cet ID comme un mot de passe. Ne le partagez pas.",
    copy: "Copier",
    enterPassword: "Saisir le mot de passe",
    cancel: "Annuler",
    confirm: "Confirmer",
  },
};

export function I18nProvider({ children }: { children: React.ReactNode }) {
  const [lang, setLangState] = useState<Lang>(() => {
    if (typeof window !== 'undefined') {
      const saved = localStorage.getItem('lang') as Lang | null;
      if (saved && saved in dict) return saved;
      const nav = navigator.language.toLowerCase();
      if (nav.startsWith('de')) return 'de-CH';
      if (nav.startsWith('fr')) return 'fr';
      if (nav.startsWith('en')) return 'en';
    }
    return 'zh';
  });
  const setLang = (l: Lang) => {
    setLangState(l);
    try { localStorage.setItem('lang', l); } catch {}
  };
  const t = (key: string) => dict[lang][key] ?? key;
  const value = useMemo(() => ({ lang, t, setLang }), [lang]);
  return <I18nContext.Provider value={value}>{children}</I18nContext.Provider>;
}

export function useI18n() {
  const ctx = useContext(I18nContext);
  if (!ctx) throw new Error('useI18n must be used within I18nProvider');
  return ctx;
}
